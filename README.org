#+TITLE: Emacs Config
#+PROPERTY: header-args emacs-lisp :tangle "~/.emacs.d/init.el"

* Table of Contents                                                     :TOC_3:
- [[#early-init][=early init=]]
- [[#initial][Initial]]
  - [[#lexical-binding][Lexical Binding]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#define-constants][Define Constants]]
  - [[#utf-8-unix-system][=utf-8-unix= System]]
  - [[#set-default-language][Set Default Language]]
  - [[#c-z-undo][C-z undo]]
  - [[#uniform-starting-directory][Uniform Starting Directory]]
  - [[#restart-emacs-with-debug][Restart Emacs with Debug]]
- [[#package-management][Package Management]]
  - [[#configure-package-manager][Configure Package Manager]]
  - [[#bootstrap-straightel][Bootstrap =Straight.el=]]
  - [[#use-package][Use Package]]
  - [[#libraries][Libraries]]
- [[#clean-emacsd][Clean .emacs.d]]
  - [[#autosave][Autosave]]
  - [[#backups][Backups]]
  - [[#history][History]]
  - [[#recent][Recent]]
  - [[#custom-file][Custom File]]
- [[#personal-information][Personal Information]]
- [[#uiux--other-visuals][UI/UX & Other Visuals]]
  - [[#autorevert][Autorevert]]
  - [[#aesthetic-changes][Aesthetic changes]]
    - [[#defaults][Defaults]]
    - [[#cursor][Cursor]]
    - [[#line-numbers][Line Numbers]]
  - [[#fonts-and-icons][Fonts and Icons]]
    - [[#fonts][Fonts]]
    - [[#all-the-icons][All the icons]]
  - [[#prettify-symbols][Prettify Symbols]]
  - [[#dashboard][Dashboard]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
    - [[#eldoc][Eldoc]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#current-time][Current Time]]
    - [[#yesno---yn][Yes/No -> y/n]]
    - [[#diminish-buffer-face-mode][Diminish Buffer Face Mode]]
- [[#bindings][Bindings]]
  - [[#which-key][Which Key]]
  - [[#esc-cancel][ESC Cancel]]
  - [[#hydra][Hydra]]
  - [[#general][General]]
  - [[#evil][Evil]]
    - [[#initial-setup][Initial setup]]
    - [[#evil-escape][Evil Escape]]
    - [[#evil-anzu][Evil Anzu]]
    - [[#evil-nerd-commenter][Evil Nerd Commenter]]
    - [[#evil-matchit][Evil Matchit]]
    - [[#evil-surround][Evil Surround]]
    - [[#evil-goggles][Evil Goggles]]
    - [[#evil-indent-plus][Evil Indent Plus]]
    - [[#evil-iedit-state][Evil Iedit State]]
    - [[#evil-numbers][Evil Numbers]]
    - [[#evil-args][Evil Args]]
    - [[#evil-mc][Evil MC]]
    - [[#evil-lion][Evil Lion]]
    - [[#evil-owl][Evil Owl]]
    - [[#evil-collection][Evil Collection]]
- [[#buffer-and-window-management][Buffer and Window Management]]
  - [[#window-management][Window Management]]
    - [[#window-history][Window History]]
  - [[#buffer-management][Buffer Management]]
    - [[#buffer-functions][Buffer Functions]]
- [[#navigation][Navigation]]
  - [[#imenu][IMenu]]
  - [[#helm][Helm]]
  - [[#ivy][Ivy]]
    - [[#basic-setup][Basic Setup]]
    - [[#ivy-bibtex][Ivy-Bibtex]]
    - [[#ivy-prescient][Ivy-Prescient]]
    - [[#ivy-hydra][Ivy-Hydra]]
    - [[#ivy-rich][Ivy-Rich]]
    - [[#ivy-posframe][Ivy-Posframe]]
    - [[#counsel][Counsel]]
    - [[#flx][Flx]]
  - [[#misc][Misc.]]
    - [[#saveplace][Saveplace]]
- [[#development][Development]]
  - [[#company][Company]]
  - [[#languages][Languages]]
    - [[#language-server-protocol][Language Server Protocol]]
    - [[#lisp][Lisp]]
  - [[#productivity][Productivity]]
    - [[#syntax-check][Syntax Check]]
    - [[#helpful][Helpful]]
    - [[#format-all][Format All]]
    - [[#indentation][Indentation]]
    - [[#numericals][Numericals]]
    - [[#color-identifiers][Color Identifiers]]
    - [[#parens][Parens]]
- [[#org][Org]]
  - [[#org-load-path][Org Load Path]]
    - [[#fix-org-git-version][Fix Org-Git-Version]]
    - [[#fix-org-release][Fix Org-Release]]
    - [[#installation][Installation]]
  - [[#org-config][Org Config]]
    - [[#basic-setup-1][Basic Setup]]
    - [[#org-source-code-blocks][Org Source Code Blocks]]
    - [[#tangle-save][Tangle Save]]
  - [[#org-ref][Org-Ref]]
  - [[#org-noter][Org-Noter]]
  - [[#pdf][PDF]]
    - [[#org-pdftools][Org-PDFTools]]
    - [[#org-noter-pdftools][Org-Noter-PDFTools]]
  - [[#toc][TOC]]
- [[#writing][Writing]]
  - [[#dictionary][Dictionary]]
    - [[#ispell][iSpell]]
  - [[#olivetti][Olivetti]]
  - [[#line-spacing][Line Spacing]]
  - [[#export][Export]]
    - [[#pandoc][Pandoc]]
  - [[#text-scaling][Text Scaling]]
    - [[#default-text-scale][Default Text Scale]]
    - [[#change-text-scale][Change Text Scale]]
- [[#pdf-1][PDF]]
  - [[#pdf-tools][PDF Tools]]
- [[#applications][Applications]]
  - [[#calendar][Calendar]]
- [[#start-server][Start Server]]
- [[#end][End]]
  - [[#message-startup-time][Message Startup Time]]
  - [[#garbage-collection-threshold][Garbage Collection Threshold]]

* =early init=
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
  ;;; -*- lexical-binding: t; -*-
  (defvar cpkx--file-name-handler-alist file-name-handler-alist)
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6
        file-name-handler-alist nil)

  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'set-scroll-bar-mode)
      (set-scroll-bar-mode nil))
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))

  (setq package-enable-at-startup nil)
#+end_src

* Initial
** Lexical Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
** Garbage Collection
#+begin_src emacs-lisp
  (defun cpkx/defer-garbage-collection ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun cpkx/restore-garbage-collection ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'cpkx/defer-garbage-collection)
  (add-hook 'minibuffer-exit-hook #'cpkx/restore-garbage-collection)
#+end_src

** Define Constants
#+begin_src emacs-lisp
(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst python-p
  (or (executable-find "python3")
      (and (executable-find "python")
           (> (length (shell-command-to-string "python --version | grep 'Python 3'")) 0)))
  "Do we have python3?")

(defconst pip-p
  (or (executable-find "pip3")
      (and (executable-find "pip")
           (> (length (shell-command-to-string "pip --version | grep 'python 3'")) 0)))
  "Do we have pip3?")

(defconst eaf-env-p
  (and *sys/linux* (display-graphic-p) python-p pip-p
       (not (equal (shell-command-to-string "pip freeze | grep '^PyQt\\|PyQtWebEngine'") "")))
  "Do we have EAF environment setup?")
#+end_src
** =utf-8-unix= System
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8)
#+end_src

** Set Default Language
#+begin_src emacs-lisp
(setenv "LANG" "en_GB")
#+end_src
** C-z undo
#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'undo) ;Emacs default is bound to hide Emacs.
  (global-set-key (kbd "C-SPC") nil)
#+end_src

** Uniform Starting Directory
#+begin_src emacs-lisp
(setq default-directory "~/" )
#+end_src

** Restart Emacs with Debug
#+begin_src emacs-lisp
  (defun cpkx/restart-emacs-debug-init (&optional args)
    (interactive)
    (restart-emacs (cons "--debug-init" args)))
#+end_src
* Package Management
** Configure Package Manager
#+begin_src emacs-lisp
 ; (unless (bound-and-true-p package--initialized)
 ;   (setq package-enable-at-startup nil)          ; To prevent initializing twice
 ;   (package-initialize))

;  ;; set use-package-verbose to t for interpreted .emacs,
;  ;; and to nil for byte-compiled .emacs.elc.
;  (eval-and-compile
;    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))
#+end_src

** Bootstrap =Straight.el=
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default t)
#+end_src

** Use Package
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
  (use-package git) ;; ensure we can install from git sources
#+end_src

** Libraries
#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src

* Clean .emacs.d
** Autosave
#+begin_src emacs-lisp
  (setq auto-save-visited-mode t)
  (setq auto-save-default t)
  (setq auto-save-timeout 20)
  (setq auto-save-interval 20)
  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq kept-new-versions 10)
  (setq kept-old-versions 0)
  (setq delete-old-versions t)
  (setq backup-by-copying t)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq delete-by-moving-to-trash t)
#+end_src
** History
#+begin_src emacs-lisp
  (setq savehist-file "~/.emacs.d/savehist")
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+end_src
** Recent
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :init
    (add-hook 'find-file-hook (lambda () (unless recentf-mode
                                      (recentf-mode)
                                      (recentf-track-opened-file))))
    :config
    (progn
      (setq recentf-max-saved-items 2000
            recentf-auto-cleanup 'never
            (recentf-mode 1))))
#+end_src
** Custom File
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src
* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Vedant Sansare")
(setq user-mail-address "vedantsansare23@gmail.com")
#+end_src

* UI/UX & Other Visuals
** Autorevert
#+begin_src emacs-lisp
  (use-package autorevert
    :ensure nil
    :diminish auto-revert-mode
    :config
    (setq auto-revert-interval 0.5)
    (global-auto-revert-mode))
#+end_src
** Aesthetic changes
*** Defaults
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq initial-major-mode 'emacs-lisp-mode)
  ;; save system clipboard contents to emacs kill ring
  (setq save-interprogram-paste-before-kill t)

  (setq column-number-mode t)
  (setq size-indication-mode t)
  (setq blink-cursor-mode 0)

  (setq pop-up-windows nil)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
#+end_src

*** Cursor
#+begin_src emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config
    (setq beacon-blink-when-window-scrolls nil
          beacon-dont-blink-major-modes '(t pdf-view-mode)
          beacon-size 10)
    (beacon-mode 1))
#+end_src

*** Line Numbers
#+begin_src emacs-lisp
  (use-package display-line-numbers
    :if (version<= "26.1" emacs-version)
    :ghook ('after-init-hook #'global-display-line-numbers-mode)
    :general
    (cpkx/leader-keys
      "tl" 'cpkx/toggle-line-numbers-type)
    :config
    (setq display-line-numbers-type 'visual)
    (defun cpkx/toggle-line-numbers-type ()
      (interactive)
      (if (eq display-line-numbers t)
          (progn
            (setq display-line-numbers 'visual)
            (message "show visual line numbers"))
        (progn
          (setq display-line-numbers t)
          (message "Show absolute line numbers")))))
#+end_src
** Fonts and Icons
*** Fonts
**** Font Face
#+begin_src emacs-lisp
;; Set the font face based on platform
(set-face-attribute 'default nil :font "FiraCode Nerd Font"  :height 110)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 110)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 120)
#+end_src

**** Unicode Support
#+begin_src emacs-lisp
  (defun cpkx/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                       (lambda (i) (string-equal (car i) block-name))
                       unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :ensure t
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
     (lambda (block-name)
       (cpkx/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
     '("Dingbats"
       "Emoticons"
       "Miscellaneous Symbols and Pictographs"
       "Transport and Map Symbols"))
    (unicode-fonts-setup))
#+end_src

*** All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src

** Prettify Symbols
Make some word or string show as pretty Unicode symbols.
#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
  (defun cpkx/add-pretty-lambda ()
    (setq prettify-symbols-alist
          '(
            ("lambda" . 955)
            ("delta" . 120517)
            ("epsilon" . 120518)
            ("->" . 8594)
            ("<=" . 8804)
            (">=" . 8805)
            )))
  (add-hook 'prog-mode-hook 'cpkx/add-pretty-lambda)
  (add-hook 'org-mode-hook  'cpkx/add-pretty-lambda)
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome Vedant")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil))
#+end_src

** Themes
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (use-package doom-themes
    :config
    ;Flash mode-line on error
    (doom-themes-visual-bell-config)

    ;Corrects org-mode’s native fontification
    (doom-themes-org-config)

    ;An interactive funtion to switch themes.
    (defun cpkx/switch-theme ()
    (interactive)
    (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
    (call-interactively #'load-theme))

    ;Set Theme
    (load-theme 'doom-dracula t))
#+end_src
** Modeline
*** Eldoc
#+begin_src emacs-lisp
  (use-package eldoc
    :ghook ('(emacs-lisp-mode-hook
              lisp-interaction-mode-hook
              ielm-mode-hook
              eval-expression-minibuffer-setup-hook)))
#+end_src
*** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    ;; Don't compact font caches during GC. Windows Laggy Issue
    (inhibit-compacting-font-caches t)
    (doom-modeline-height 15)
    (doom-modeline-lsp t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t))
#+end_src

*** Current Time
**** Time modeline parameters
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq display-time-day-and-date t)
  (setq display-time-mode t)
#+end_src

**** Show Current Time function
#+begin_src emacs-lisp
  (defun cpkx/show-current-time ()
    (interactive)
    (message (current-time-string)))
#+end_src
*** Yes/No -> y/n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** TODO Diminish Buffer Face Mode
Temporary solution to remove buffer face mode from modeline
#+begin_src emacs-lisp
  (eval-after-load "face-remap"
    '(diminish 'buffer-face-mode))
#+end_src

* Bindings
** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :custom
    (which-key-separator " ")
    (which-key-prefix-prefix "+")
    :config
    (setq which-key-idle-delay 0))
#+end_src

** ESC Cancel
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :config
    (setq hydra-hint-display-type 'cpkx/posframe)
    (defun cpkx/hydra-posframe-show (str)
      (require 'posframe)
      (posframe-show
       " *hydra-posframe*"
       :string str
       :point (point)
       :internal-border-color "gray50"
       :internal-border-width 2
       :poshandler #'posframe-poshandler-frame-top-center))
    (defun cpkx/hydra-posframe-hide ()
      (posframe-hide " *hydra-posframe*"))
    (setq hydra-hint-display-alist
          (list (list 'cpkx/posframe #'cpkx/hydra-posframe-show #'cpkx/hydra-posframe-hide))
          hydra--work-around-dedicated nil))
#+end_src
** General
#+begin_src emacs-lisp
  (use-package general
    :config
    (progn
      (general-create-definer cpkx/normal-keys
        :states  'normal
        :keymaps 'override)
      (general-create-definer cpkx/motion-keys
        :states  'motion
        :keymaps 'override)
      (general-create-definer cpkx/non-insert-keys
        :states  '(normal visual motion)
        :keymaps 'override)
      (general-create-definer cpkx/leader-keys
        :states  '(normal visual motion emacs insert)
        :keymaps 'override
        :prefix  "SPC"
        :non-normal-prefix "M-SPC")
      (general-create-definer cpkx/leader-keys-major-mode
        :states  '(normal visual motion emacs insert)
        :keymaps 'override
        :prefix  ","
        :non-normal-prefix "M-,")
      (general-create-definer cpkx/leader-keys-minor-mode
        :states  '(normal visual motion emacs insert)
        :keymaps 'override
        :prefix  ";"
        :non-normal-prefix "M-;")
      (general-create-definer cpkx/all-states-keys
        :states  '(normal visual motion emacs insert)
        :keymaps 'override)))
#+end_src

** Evil
*** Initial setup
#+begin_src emacs-lisp
  (use-package evil
    :general
    (:keymaps 'override
              :states 'insert
              "C-j" 'evil-next-line
              "C-k" 'evil-previous-line
              "M-o" 'evil-open-below)
    :init
    (setq evil-want-keybinding nil)
    :config
    (define-key evil-insert-state-map [remap evil-complete-previous] 'hippie-expand)
    (cpkx/normal-keys
      "gD" 'xref-find-definitions-other-window
      "gd" 'xref-find-definitions)
    (progn
      (evil-set-initial-state 'pdf-view-mode            'normal)
      (evil-set-initial-state 'pdf-outline-buffer-mode  'normal)
      (evil-set-initial-state 'calendar-mode            'normal)
      (evil-set-initial-state 'pdf-occur-buffer-mode    'normal)
      (evil-set-initial-state 'imenu-list-major-mode    'normal)
      (evil-set-initial-state 'neotree-mode             'normal)
      (evil-set-initial-state 'flycheck-error-list-mode 'normal)
      (evil-set-initial-state 'nov-mode                 'normal)
      (evil-set-initial-state 'lsp-ui-imenu-mode        'normal)
      (evil-set-initial-state 'helpful-mode             'normal)
      (evil-set-initial-state 'Custom-mode              'normal)
      (evil-set-initial-state 'occur-mode               'normal)
      (setq evil-insert-state-cursor '(bar "LimeGreen")
            evil-normal-state-cursor '(box "darkorange")
            evil-visual-state-cursor '(box "LightGoldenrod")
            evil-emacs-state-cursor  '(box "MediumPurple2")
            evil-echo-state nil)
   ;;;###autoload
      (defun cpkx/end-of-buffer ()
        "Go to beginning of last line in buffer.
   If last line is empty, go to beginning of penultimate one
   instead."
        (interactive)
        (goto-char (point-max))
        (beginning-of-line (and (looking-at-p "^$") 0)))
   ;;;###autoload
      (evil-define-motion cpkx/evil-goto-line (count)
        "Go to the first non-blank character of line COUNT.
   By default the last line."
        :jump t
        :type line
        (if (null count)
            (with-no-warnings (cpkx/end-of-buffer))
          (goto-char (point-min))
          (forward-line (1- count)))
        (evil-first-non-blank))

      (global-set-key [remap evil-goto-line] #'cpkx/evil-goto-line)
      (evil-mode 1)))
#+end_src

*** Evil Escape
#+begin_src emacs-lisp
  (use-package evil-escape
    :diminish evil-escape-mode
    :init
    (with-eval-after-load 'company
      (add-hook 'evil-normal-state-entry-hook #'company-cancel))
    (setq evil-escape-key-sequence "jk"
          evil-escape-unordered-key-sequence t)
    :config
    (evil-escape-mode))
#+end_src
*** Evil Anzu
#+begin_src emacs-lisp
  (use-package evil-anzu
    :ghook ('after-init-hook #'global-anzu-mode)
    :diminish anzu-mode
    :general
    (cpkx/leader-keys
      "rs" 'anzu-query-replace
      "rr" 'anzu-query-replace-regexp)
    :config
    (global-set-key [remap query-replace] 'anzu-query-replace)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp))
#+end_src

*** Evil Nerd Commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
    :general
    (cpkx/leader-keys
      ";" 'evilnc-comment-operator
      "M-;" 'evilnc-copy-and-comment-operator
      "cl" 'evilnc-comment-or-uncomment-lines
      "cp" 'evilnc-comment-or-uncomment-paragraphs))
#+end_src
*** Evil Matchit
#+begin_src emacs-lisp
  (use-package evil-matchit
    :general
    (:keymaps 'override
     :states '(normal visual)
     "%" 'evilmi-jump-items)
    (:keymaps 'evil-inner-text-objects-map
     "%" 'evilmi-jump-items)
    (:keymaps 'evil-outer-text-objects-map
     "%" 'evilmi-jump-items)
    :config
    (setq evilmi-always-simple-jump t)
    (global-evil-matchit-mode))
#+end_src

*** Evil Surround
#+begin_src emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1))
#+end_src
*** Evil Goggles
#+begin_src emacs-lisp
  (use-package evil-goggles
    :diminish evil-goggles-mode
    :after evil
    :config
    (evil-goggles-mode))
#+end_src
*** Evil Indent Plus
#+begin_src emacs-lisp
  (use-package evil-indent-plus
    :general
    (:keymaps 'evil-inner-text-objects-map
              "i" 'evil-indent-plus-i-indent
              "I" 'evil-indent-plus-i-indent-up
              "J" 'evil-indent-plus-i-indent-up-down)
    (:keymaps 'evil-outer-text-objects-map
              "i" 'evil-indent-plus-a-indent
              "I" 'evil-indent-plus-a-indent-up
              "J" 'evil-indent-plus-a-indent-up-down))
#+end_src
*** Evil Iedit State
#+begin_src emacs-lisp
  (use-package evil-iedit-state
    :general
    (cpkx/leader-keys "se" 'evil-iedit-state/iedit-mode)
    :config
    (setq iedit-current-symbol-default t
          iedit-only-at-symbol-boundaries t
          iedit-toggle-key-default nil))
#+end_src
*** Evil Numbers
#+begin_src emacs-lisp
  (use-package evil-numbers
    :general
    (cpkx/leader-keys
      "n" '(:ignore t :wk "numbers")
      "ni" 'evil-numbers/inc-at-pt
      "nd" 'evil-numbers/dec-at-pt
      "n." 'hydra-evil-numbers/body)
    :config
    (defhydra hydra-evil-numbers (:hint nil)
      "
  Evil Numbers: [_i_] increase [_d_] decrease [0..9] prefix [_q_] exit
  "
      ("i" evil-numbers/inc-at-pt)
      ("d" evil-numbers/dec-at-pt)
      ("q" nil :exit t)))
#+end_src
*** Evil Args
#+begin_src emacs-lisp
  (use-package evil-args
    :after evil
    :general
    (cpkx/normal-keys
      "gL" 'evil-forward-arg
      "gh" 'evil-backward-arg
      "gK" 'evil-jump-out-args)
    :config
    (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
    (define-key evil-outer-text-objects-map "a" 'evil-outer-arg))
#+end_src
*** Evil MC
#+begin_src emacs-lisp
  (use-package evil-mc
    :diminish evil-mc-mode
    :commands (evil-mc-make-cursor-here
               evil-mc-make-all-cursors
               evil-mc-undo-all-cursors evil-mc-pause-cursors
               evil-mc-resume-cursors evil-mc-make-and-goto-first-cursor
               evil-mc-make-and-goto-last-cursor
               evil-mc-make-cursor-move-next-line
               evil-mc-make-cursor-move-prev-line evil-mc-make-cursor-at-pos
               evil-mc-has-cursors-p evil-mc-make-and-goto-next-cursor
               evil-mc-skip-and-goto-next-cursor evil-mc-make-and-goto-prev-cursor
               evil-mc-skip-and-goto-prev-cursor evil-mc-make-and-goto-next-match
               evil-mc-skip-and-goto-next-match evil-mc-skip-and-goto-next-match
               evil-mc-make-and-goto-prev-match evil-mc-skip-and-goto-prev-match)
    :init
    (add-hook 'prog-mode-hook #'evil-mc-mode)
    (add-hook 'text-mode-hook #'evil-mc-mode)
    (cpkx/normal-keys
      "gr" '(:ignore t :wk "evil-mc"))
    (setq evil-mc-incompatible-minor-modes
          '(evil-escape-mode
            aggressive-indent-mode
            flycheck-mode
            flyspell-mode
            haskell-indent-mode
            haskell-indentation-mode
            yas-minor-mode)))
#+end_src
*** Evil Lion
#+begin_src emacs-lisp
  (use-package evil-lion
    :general
    (:states '(normal visual)
             "ga" 'evil-lion-left
             "gA" 'evil-lion-right)
    :config
    (setq evil-lion-left-align-key nil
          evil-lion-right-align-key nil))
#+end_src
*** Evil Owl
#+begin_src emacs-lisp
  (use-package evil-owl
    :diminish: evil-owl-mode
    :after evil
    :config
    (setq evil-owl-register-char-limit 100
          evil-owl-display-method 'posframe
          evil-owl-extra-posframe-args '(:internal-border-color "gray50"
                                                                :internal-border-width 2
                                                                :width 80))
    (evil-owl-mode))
#+end_src

*** Evil Collection
#+begin_src emacs-lisp
  (use-package evil-collection
    :config
    (with-eval-after-load 'reftex (evil-collection-reftex-setup))
    (with-eval-after-load 'magit  (evil-collection-magit-todos-setup)))
#+end_src
* Buffer and Window Management
** Window Management
*** Window History
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :init
    (cpkx/leader-keys
     "wu" 'winner-undo
     "wU" 'winner-redo)
    :config
    (setq winner-boring-buffers
          '("*Completions*"
            "*Compile-Log*"
            "*inferior-lisp*"
            "*Fuzzy Completions*"
            "*Apropos*"
            "*Help*"
            "*cvs*"
            "*Buffer List*"
            "*Ibuffer*"
            "*esh command on file*"
            "*Youdao Dictionary*"
            "*PDF-Occur*"
            "*Google Translate*"
            "*magit.*"
            ))
    (winner-mode))
#+end_src
** Buffer Management
*** Buffer Functions
**** Switch Alternate Buffer
#+begin_src emacs-lisp
  (defun cpkx/alternate-buffer (&optional window)
    (interactive)
    (let ((current-buffer (window-buffer window)))
      (without-purpose (switch-to-buffer
                        (cl-find-if (lambda (buffer)
                                      (not (eq buffer current-buffer)))
                                    (mapcar #'car (window-prev-buffers window)))))))
#+end_src
**** Kill Buffer
#+begin_src emacs-lisp
  (defun cpkx/kill-this-buffer (&optional arg)
    (interactive "P")
    (if (window-minibuffer-p)
        (abort-recursive-edit)
      (if (equal '(4) arg)
          (kill-buffer-and-window)
        (kill-buffer))))
#+end_src
**** Maximize Buffer
#+begin_src emacs-lisp
  (defun cpkx/toggle-maximize-buffer ()
    "Maximize buffer"
    (interactive)
    (if (and (= 1 (length (window-list)))
             (assoc ?_ register-alist))
        (jump-to-register ?_)
      (progn
        (window-configuration-to-register ?_)
        (delete-other-windows))))
#+end_src
* Navigation
** IMenu
#+begin_src emacs-lisp
  (use-package imenu
    :ensure nil
    :general
    (cpkx/leader-keys
      "ji" 'imenu))
#+end_src
** Helm
#+begin_src emacs-lisp :tangle no
  (use-package helm-bibtex
    :config
    (setq bibtex-completion-bibliography      "~/Dropbox/org/Research/zotLib.bib")
    (setq bibtex-completion-library-path      "~/Dropbox/org/Research/zotero-library/")
    (setq bibtex-completion-notes-path        "~/git/phd/notes/notes.org")
    (setq bibtex-completion-pdf-field         "file")
    (setq bibtex-completion-notes-template-one-file
          (concat
           "#+TITLE: ${title}\n"
           "#+CITE_KEY: ${=key=}\n"
           ":PROPERTIES:\n"
           ":Custom_ID: ${=key=}\n"
           ":NOTER_DOCUMENT: ${file}\n"
           ":AUTHOR: ${author-abbrev}\n"
           ":JOURNAL: ${journaltitle}\n"
           ":DATE: ${date}\n"
           ":YEAR: ${year}\n"
           ":DOI: ${doi}\n"
           ":URL: ${url}\n"
           ":END:\n\n")))
#+end_src
** Ivy
*** Basic Setup
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (use-package counsel)
    (use-package swiper)
    (ivy-mode 1)
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("TAB" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'swiper ivy-height-alist) 15))
#+end_src

*** Ivy-Bibtex
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :config
    (setq bibtex-completion-bibliography        "~/Dropbox/org/Research/zotLib.bib")
    (setq bibtex-completion-library-path        "~/Dropbox/org/Research/zotero-library/")
    (setq bibtex-completion-notes-path          "~/git/phd/notes/")
    (setq ivy-bibtex-default-action             'ivy-bibtex-edit-notes)
    (setq bibtex-completion-pdf-field           "file")
    (setq bibtex-completion-find-additional-pdfs t)
    (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
    (setq	bibtex-completion-pdf-symbol "ρ")
    (setq	bibtex-completion-notes-symbol "η")
    (setq bibtex-completion-notes-template-multiple-files
          (concat
           "#+TITLE: ${title}\n"
           "#+CITE_KEY: ${=key=}\n"
           ":PROPERTIES:\n"
           ":Custom_ID: ${=key=}\n"
           ":AUTHOR: ${author-abbrev}\n"
           ":JOURNAL: ${journaltitle}\n"
           ":DATE: ${date}\n"
           ":YEAR: ${year}\n"
           ":DOI: ${doi}\n"
           ":URL: ${url}\n"
           ":END:\n\n")))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24555 39209 448663 0) :init (24555 39209 448659 0) :config (24555 39209 448653 0) :config-secs (0 0 4 0) :init-secs (0 0 12 0) :use-package-secs (0 0 57 0)))

*** Ivy-Prescient
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src
*** Ivy-Hydra
#+begin_src emacs-lisp
  (use-package ivy-hydra
    :after hydra)
#+end_src
*** Ivy-Rich
#+begin_src emacs-lisp
    (use-package ivy-rich
      :init
      (ivy-rich-mode 1)
      :config
      (setq ivy-format-function #'ivy-format-function-line)
      )
#+end_src
*** Ivy-Posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :after ivy
    :config
    (setq ivy-posframe-hide-minibuffer t
          ivy-posframe-border-width 2
          ivy-posframe-min-width 80
          ivy-posframe-min-height 10
          ivy-posframe-width nil
          ivy-posframe-height nil)
    (setq ivy-posframe-display-functions-alist
          '((swiper . ivy-posframe-display-at-window-bottom-left)
            (t . ivy-posframe-display-at-frame-center)
            ))
    (ivy-posframe-mode 1))
#+end_src
*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :ensure t
    :bind
    (("M-x"     . counsel-M-x)
     ("C-M-j"   . 'counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     ("C-M-l"   . counsel-imenu)
     :map minibuffer-local-map
     ("C-r"     . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)
    (counsel-mode 1))
#+end_src
*** Flx
#+begin_src emacs-lisp
  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :init
    (setq ivy-flx-limit 10000))
#+end_src

** Misc.
*** Saveplace
#+begin_src emacs-lisp
  (use-package saveplace
    :ensure nil
    :config
    (save-place-mode))
#+end_src
* Development
** Company
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** Language Server Protocol
#+begin_src emacs-lisp
  (use-package ivy-xref
    :init (if (< emacs-major-version 27)
              (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
            (setq xref-show-definitions-function #'ivy-xref-show-defs)))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    (lsp-file-watch-threshold 2000)
    (read-process-output-max (* 1024 1024))
    (lsp-eldoc-hook nil))

  (use-package lsp-ui
    :after lsp-mode
    :diminish
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))
#+end_src

*** Lisp
#+begin_src emacs-lisp
  (defun cpkx/lisp-indent-function (indent-point state)
    (let ((normal-indent (current-column))
          (orig-point (point)))
      (goto-char (1+ (elt state 1)))
      (parse-partial-sexp (point) calculate-lisp-indent-last-sexp 0 t)
      (cond
       ((and (elt state 2)
             (or (not (looking-at "\\sw\\|\\s_"))
                 (looking-at ":")))
        (if (not (> (save-excursion (forward-line 1) (point))
                    calculate-lisp-indent-last-sexp))
            (progn (goto-char calculate-lisp-indent-last-sexp)
                   (beginning-of-line)
                   (parse-partial-sexp (point)
                                       calculate-lisp-indent-last-sexp 0 t)))
        (backward-prefix-chars)
        (current-column))
       ((and (save-excursion
               (goto-char indent-point)
               (skip-syntax-forward " ")
               (not (looking-at ":")))
             (save-excursion
               (goto-char orig-point)
               (looking-at ":")))
        (save-excursion
          (goto-char (+ 2 (elt state 1)))
          (current-column)))
       (t
        (let ((function (buffer-substring (point)
                                          (progn (forward-sexp 1) (point))))
              method)
          (setq method (or (function-get (intern-soft function)
                                         'lisp-indent-function)
                           (get (intern-soft function) 'lisp-indent-hook)))
          (cond ((or (eq method 'defun)
                     (and (null method)
                          (> (length function) 3)
                          (string-match "\\`def" function)))
                 (lisp-indent-defform state indent-point))
                ((integerp method)
                 (lisp-indent-specform method state
                                       indent-point normal-indent))
                (method
                 (funcall method indent-point state))))))))

  (with-eval-after-load 'lisp-mode
    (setq lisp-indent-function 'cpkx/lisp-indent-function))
#+end_src

** Productivity
*** Syntax Check
**** Toggle Check
#+begin_src emacs-lisp
  (defun cpkx/toggle-syntax-checking ()
    (interactive)
    (if (bound-and-true-p flycheck-mode)
        (progn
          (flycheck-mode -1)
          (message "Flycheck mode disabled in current buffer"))
      (progn
        (flycheck-mode 1)
        (message "Flycheck mode enabled in current buffer"))))
#+end_src
*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

*** Format All
#+begin_src emacs-lisp
(use-package format-all
  :bind ("C-c C-f" . format-all-buffer))
#+end_src

*** Indentation
*** Numericals
**** Highlight Num
#+begin_src emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))
#+end_src

*** Color Identifiers
**** Initial Setup
#+begin_src emacs-lisp
  (use-package color-identifiers-mode
    :diminish color-identifiers-mode
    :hook (prog-mode . color-identifiers-mode))
#+end_src

**** Toggle Color Indentifiers
#+begin_src emacs-lisp
  (defun cpkx/toggle-color-identifiers ()
    (interactive)
    (if (bound-and-true-p color-identifiers-mode)
        (progn
          (color-identifiers-mode -1)
          (message "Color identifiers mode disabled in current buffer"))
      (progn
        (color-identifiers-mode 1)
        (message "Color identifiers mode enabled in current buffer"))))
#+end_src
*** Parens
**** Smart Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :config
;    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))
#+end_src

**** Highlight Paren
#+begin_src emacs-lisp
  ;(use-package highlight-parentheses
  ;  :diminish highlight-parentheses-mode
  ;  :hook (prog-mode . highlight-parentheses-mode)
  ;  :config
  ;  (setq hl-paren-delay 0.2)
  ;  (setq hl-paren-colors '("Springgreen3"
   ;                         "IndianRed1"
   ;                         "IndianRed3"
   ;                         "IndianRed4"))
   ; (set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))
#+end_src
**** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Org
** Org Load Path
*** Fix Org-Git-Version
#+begin_src emacs-lisp
(defun cpkx/fix-org-git-version ()
  "The Git version of org-mode.
  Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))
#+end_src
*** Fix Org-Release
#+begin_src emacs-lisp
(defun cpkx/fix-org-release ()
  "The release version of org-mode.
  Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))
#+end_src
*** Installation
#+begin_src emacs-lisp
(use-package org
  :config
  ;; these depend on the 'straight.el fixes' above
  (defalias #'org-git-version #'cpkx/fix-org-git-version)
  (defalias #'org-release #'cpkx/fix-org-release)
  (require 'org-habit)
  (require 'org-capture)
  (require 'org-tempo))
#+end_src

** Org Config
*** Basic Setup
#+begin_src emacs-lisp
  (defun cpkx/org-mode-setup ()
    (org-indent-mode)
    (diminish 'org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0))

  (use-package org
    :diminish t
    :hook (org-mode . cpkx/org-mode-setup)
    :config
    (setq org-directory "~/Dropbox/org"))
#+end_src

*** Org Source Code Blocks
**** Org Structure Template
#+begin_src emacs-lisp
  (use-package org
    :diminish
    :config
    (setq org-structure-template-alist
	'(("e" . "src emacs-lisp"))))
#+end_src

*** Tangle Save
Saves
#+begin_src emacs-lisp
  (defun cpkx/org-babel-tangle-save ()
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cpkx/org-babel-tangle-save
                                           'run-at-end 'only-in-org-mode)))
#+end_src

** Org-Ref
#+begin_src emacs-lisp
  ;(use-package org-ref
  ;  :after bibtex
  ;  :demand
  ;  :config
  ;  (setq org-ref-pdf-directory               "~/Dropbox/org/Research/zotero-library/")
  ;  (setq org-ref-default-bibliography      '("~/Dropbox/org/Research/zotLib.bib"))
  ;  (setq org-ref-bibliography-notes          "~/git/phd/notes/notes.org")
  ;  (setq reftex-default-bibliography         org-ref-default-bibliography)
  ;  (setq org-ref-note-title-format
  ;        "* TODO %y - %t\n
  ;:PROPERTIES:\n
  ; :Custom_ID: %k\n
  ; :NOTER_DOCUMENT: %F\n
  ; :AUTHOR: %9a\n
  ; :JOURNAL: %j\n
  ; :YEAR: %y\n
  ; :VOLUME: %v\n
  ; :PAGES: %p\n
  ; :DOI: %D\n
  ; :URL: %U\n
  ;:END:\n\n")
  ;  (helm-bibtex-ed)
  ;  (setq org-ref-notes-function            'orb-edit-notes)
  ;  (setq org-ref-completion-library        'org-ref-ivy-cite)
  ;  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex))
    #+end_src

** Org-Noter
#+begin_src emacs-lisp
  (use-package org-noter
    :config
    (setq org-noter-default-notes-file-names  '("notes.org"))
    (setq org-noter-notes-search-path         '("~/git/phd/notes"))
    (setq org-noter-auto-save-last-location   t)
    (setq org-noter-always-create-frame       nil)
    (setq org-noter-insert-note-no-questions  t)
    (setq org-noter-notes-window-location     'horizontal-split))
#+end_src

** PDF
*** Org-PDFTools
#+begin_src emacs-lisp
;(use-package org-pdftools
;  :hook (org-mode . org-pdftools-setup-link))
#+end_src

*** Org-Noter-PDFTools
#+begin_src emacs-lisp
;(use-package org-noter-pdftools
;  :after org-noter
;  :config
;  (with-eval-after-load 'pdf-annot
;    (add-hook 'pdf-annot-activate-handler-functions ;#'org-noter-pdftools-jump-to-note)))
#+end_src

** TOC
#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+end_src

* Writing
** Dictionary
*** iSpell
**** Initial Config
#+begin_src emacs-lisp
  (use-package ispell
    :ensure nil
    :config
    (progn
      (setq ispell-program-name "aspell"
            ispell-silently-savep t
            ispell-look-command "/bin/grep"
            ispell-look-options "-Ei")))
#+end_src
**** Lookup words function
#+begin_src emacs-lisp
  (defun cpkx/ispell-lookup-words (word &optional lookup-dict)
    (if (null lookup-dict)
        (setq lookup-dict (or ispell-complete-word-dict
                              ispell-alternate-dictionary)))
    (if lookup-dict
        (unless (file-readable-p lookup-dict)
          (error "lookup-words error: Unreadable or missing plain word-list %s."
                 lookup-dict))
      (error (concat "lookup-words error: No plain word-list found at system"
                     "default locations.  "
                     "Customize `ispell-alternate-dictionary' to set yours.")))

    (let* ((process-connection-type ispell-use-ptys-p)
           (wild-p (string-match "\\*" word))
           (look-p (and ispell-look-p
                        (or ispell-have-new-look (not wild-p))))
           (prog (if look-p ispell-look-command ispell-grep-command))
           (args (if look-p ispell-look-options ispell-grep-options))
           status results loc)
      (with-temp-buffer
        (if look-p
            nil
          (insert "^" word)
          (unless wild-p (insert "*"))
          (insert "$")
          (while (search-backward "*" nil t) (insert "."))
          (setq word (buffer-string))
          (erase-buffer))
        (setq status (apply 'ispell-call-process prog nil t nil
                            (nconc (if (and args (> (length args) 0))
                                       (list args)
                                     (if look-p nil
                                       (list "-e")))
                                   (list word)
                                   (if lookup-dict (list lookup-dict)))))
        (if (stringp status)
            (error "error: %s exited with signal %s"
                   (file-name-nondirectory prog) status)
          (goto-char (point-max))
          (or (bobp) (= (preceding-char) ?\n) (insert ?\n))
          (while (not (bobp))
            (setq loc (point))
            (forward-line -1)
            (push (buffer-substring-no-properties (point)
                                                  (1- loc))
                  results))))
      (if (and results (string-match ".+: " (car results)))
          (error "%s error: %s" ispell-grep-command (car results)))
      results))

  (advice-add 'ispell-lookup-words :override #'cpkx/ispell-lookup-words)
#+end_src
** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :hook ((text-mode) . olivetti-mode)
    :diminish
    (olivetti-mode)
    :config
    (setq olivetti-body-width 0.7)
    (setq olivetti-minimum-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t))
  (diminish 'visual-line-mode)
#+end_src

** Line Spacing
#+begin_src emacs-lisp
;;; Line spacing, can be 0 for code and 1 or 2 for text
(setq-default line-spacing 2)
#+end_src

** Export
*** Pandoc
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :hook ((text-mode) . pandoc-mode)
    :diminish pandoc-mode)
#+end_src
** Text Scaling
*** Default Text Scale
#+begin_src emacs-lisp
(use-package default-text-scale
  :config
  (default-text-scale-mode))
#+end_src
*** Change Text Scale
#+begin_src emacs-lisp
  (defhydra hydra-window-scale ()
    "window-scale"
    ("i" (lambda () (interactive) (enlarge-window-horizontally 10)) "in")
    ("o" (lambda () (interactive) (shrink-window-horizontally 10)) "out")
    ("I" (lambda () (interactive) (enlarge-window 5)) "IN")
    ("O" (lambda () (interactive) (shrink-window 5)) "OUT")
    ("r" balance-windows "reset")
    ("q" nil "quit"))
  (cpkx/leader-keys
    "wz" 'hydra-window-scale/body)
#+end_src
* PDF
** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :diminish pdf-view-midnight-minor-mode
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :config
    (progn
      (require 'pdf-occur)
      (require 'pdf-sync)
      (pdf-tools-install :no-query)
      (add-hook 'pdf-view-mode-hook (lambda() (pdf-view-midnight-minor-mode 1)))
      (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
      (add-hook 'pdf-view-mode-hook #'pdf-tools-enable-minor-modes)))
#+end_src
* Applications
** Calendar
#+begin_src emacs-lisp
  (use-package calendar
    :ensure nil
    :commands calendar
    :config
    ;; keybindings are copied from evil-collection
    (cpkx/normal-keys
      :keymaps 'calendar-mode-map
      ;; motion
      "h"   'calendar-backward-day
      "j"   'calendar-forward-week
      "k"   'calendar-backward-week
      "l"   'calendar-forward-day
      "0"   'calendar-beginning-of-week
      "^"   'calendar-beginning-of-week
      "$"   'calendar-end-of-week
      "["   'calendar-backward-year
      "]"   'calendar-forward-year
      "M-<" 'calendar-beginning-of-year
      "M->" 'calendar-end-of-year
      "("   'calendar-beginning-of-month
      ")"   'calendar-end-of-month
      "<"   'calendar-scroll-right
      ">"   'calendar-scroll-left
      "C-b" 'calendar-scroll-right-three-months
      "C-f" 'calendar-scroll-left-three-months
      "{"   'calendar-backward-month
      "}"   'calendar-forward-month
      "C-k" 'calendar-backward-month
      "C-j" 'calendar-forward-month
      "gk"   'calendar-backward-month
      "gj"   'calendar-forward-month

      ;; visual
      "v" 'calendar-set-mark

      ;; goto
      "." 'calendar-goto-today
      "gd" 'calendar-goto-date ; "gd" in evil-org-agenda, "gd" in Emacs.
      ;; "gD" 'calendar-other-month ; Not very useful if we have `calendar-goto-date'.

      ;; diary
      "D" 'diary-view-other-diary-entries
      "d" 'diary-view-entries
      "m" 'diary-mark-entries
      "s" 'diary-show-all-entries

      "u" 'calendar-unmark
      "x" 'calendar-mark-holidays

      ;; show
      "gm" 'calendar-lunar-phases ; "gm" in evil-org-agenda.
      "gs" 'calendar-sunrise-sunset ; "gs" in evil-org-agenda
      "gh" 'calendar-list-holidays ; "gh" in evil-org-agenda.
      "ga" 'org-calendar-goto-agenda ; "gc" in evil-org-agenda.
      "r" 'calendar-cursor-holidays

      ;; refresh
      "gr" 'calendar-redraw

      "g?" 'calendar-goto-info-node
      "?" 'calendar-goto-info-node ; Search is not very useful.
      "M-=" 'calendar-count-days-region

      ;; quit
      "q" 'calendar-exit))
#+end_src
* Start Server
#+begin_src emacs-lisp
  (use-package server
    :ensure nil
    :ghook ('after-init-hook #'server-start))
#+end_src
* End
** Message Startup Time
#+begin_src emacs-lisp
  (setq inhibit-startup-echo-area-message "cpkx")
  (setq inhibit-startup-screen t)
  (when (require 'time-date nil t)
    (message "Emacs startup time: %.2f seconds."
             (time-to-seconds (time-since emacs-load-start-time))))
#+end_src
** Garbage Collection Threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold 800000
        gc-cons-percentage 0.1
        file-name-handler-alist cpkx--file-name-handler-alist)
#+end_src
