#+TITLE:  Emacs Configuration
#+AUTHOR: Vedant Sansare
#+PROPERTY: header-args emacs-lisp :tangle init.el :results silent :comments link

* Early =init.el=
** Lexical Binding
#+begin_src emacs-lisp :tangle early-init.el
  ;;; -*- lexical-binding: t; -*-
#+end_src
** Garbage Collection
#+begin_src emacs-lisp :tangle early-init.el
 (setq gc-cons-threshold most-positive-fixnum)
#+end_src
** File name handler
#+begin_src emacs-lisp :tangle early-init.el
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq file-name-handler-alist nil)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq file-name-handler-alist default-file-name-handler-alist)) 100)
#+end_src
** Disable =package.el=
#+begin_src emacs-lisp :tangle early-init.el
  (setq package-enable-at-startup nil)
#+end_src
** Visuals
#+begin_src emacs-lisp :tangle early-init.el 
  (setq frame-inhibit-implied-resize t
        inhibit-startup-screen           t)
#+end_src
* Initial
** Lexical Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
** Garbage Collection
 #+begin_src emacs-lisp
 (defconst 1mb 1048576)
 (defconst 20mb 20971520)
 (defconst 30mb 31457280)
 (defconst 50mb 52428800)

 (defun cpkx/defer-garbage-collection ()
   (setq gc-cons-threshold most-positive-fixnum))

 (defun cpkx/restore-garbage-collection ()
   (run-at-time 1 nil (lambda () (setq gc-cons-threshold 30mb))))

 (add-hook 'emacs-startup-hook 'cpkx/restore-garbage-collection 100)
 (add-hook 'minibuffer-setup-hook 'cpkx/defer-garbage-collection)
 (add-hook 'minibuffer-exit-hook 'cpkx/restore-garbage-collection)

 (setq read-process-output-max 1mb)
 #+end_src
** Set Default Language
#+begin_src emacs-lisp
(setenv "LANG" "en_GB")
#+end_src
** =utf-8-unix= System
#+begin_src emacs-lisp
  (defun doom-modeline-conditional-buffer-encoding ()
    "We expect the encoding to be LF UTF-8, so only show the modeline when this is not the case"
    (setq-local doom-modeline-buffer-encoding
                (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                            (eq buffer-file-coding-system 'utf-8)))))

  (add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8)
#+end_src
** Uniform Starting Directory
#+begin_src emacs-lisp
(setq default-directory "~/" )
#+end_src
* Package Management
** Bootstrap =straight.el=
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default t)
#+end_src
** Use Package
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
(use-package git) ;; ensure we can install from git sources
#+end_src
* Better Defaults
** Clean .emacs.d
*** Autosave
#+begin_src emacs-lisp
  (setq auto-save-visited-mode t)
  (setq auto-save-default t)
  (setq auto-save-timeout 20)
  (setq auto-save-interval 20)
#+end_src

*** Backups
#+begin_src emacs-lisp
  (setq kept-new-versions 10)
  (setq kept-old-versions 0)
  (setq delete-old-versions t)
  (setq backup-by-copying t)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq delete-by-moving-to-trash t)
#+end_src
*** History
#+begin_src emacs-lisp
  (savehist-mode 1)
  (setq history-length t)
  (setq history-delete-duplicates t)
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring
          search-ring
          regexp-search-ring))
#+end_src
*** Recent
#+begin_src emacs-lisp
  (use-package recentf
    :ensure nil
    :init
    (add-hook 'find-file-hook (lambda () (unless recentf-mode
                                      (recentf-mode)
                                      (recentf-track-opened-file))))
    :config
      (setq recentf-max-saved-items 2000)
      (setq recentf-auto-cleanup 'never)
      (recentf-mode 1))
#+end_src
 
*** No-littering
#+begin_src emacs-lisp
  (use-package no-littering
    :config
    (with-eval-after-load 'recentf
      (add-to-list 'recentf-exclude no-littering-var-directory)
      (add-to-list 'recentf-exclude no-littering-etc-directory))

    (setq auto-save-file-name-transforms  ; autosaved-file-name~
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))

          custom-file (no-littering-expand-etc-file-name "custom.el"))

    (if (file-exists-p custom-file)
        (load-file custom-file)))
#+end_src
#+end_src
* UI/UX & Other Visuals
** Fonts & Symbols
*** Font
#+begin_src emacs-lisp
  ;; Set the font face based on platform
  (set-face-attribute 'default nil :font "FiraCode Nerd Font"  :height 100)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 100)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Alegreya" :height 120)
#+end_src
*** Symbols
**** Unicode
#+begin_src emacs-lisp
(defun cpkx/replace-unicode-font-mapping (block-name old-font new-font)
  (let* ((block-idx (cl-position-if
                     (lambda (i) (string-equal (car i) block-name))
                     unicode-fonts-block-font-mapping))
         (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
         (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
    (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
          `(,updated-block))))

(use-package unicode-fonts
  :ensure t
  :custom
  (unicode-fonts-skip-font-groups '(low-quality-glyphs))
  :config
  ;; Fix the font mappings to use the right emoji font
  (mapcar
   (lambda (block-name)
     (cpkx/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
   '("Dingbats"
     "Emoticons"
     "Miscellaneous Symbols and Pictographs"
     "Transport and Map Symbols"))
  (unicode-fonts-setup))
#+end_src
**** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :init
  (add-hook 'after-init-hook (lambda () (require 'all-the-icons)))
  :config
  (setq all-the-icons-scale-factor 1.0))
#+end_src
**** Prettify Symbols
#+begin_src emacs-lisp
(global-prettify-symbols-mode 1)
(defun cpkx/add-pretty-symb ()
  (setq prettify-symbols-alist
        '(
          ("lambda" . 955)
          ("delta" . 120517)
          ("epsilon" . 120518)
          ("->" . 8594)
          ("<=" . 8804)
          (">=" . 8805)
          )))
(add-hook 'prog-mode-hook 'cpkx/add-pretty-symb)
(add-hook 'org-mode-hook  'cpkx/add-pretty-symb)
#+end_src
** Themes
#+begin_src emacs-lisp
(setq custom-safe-themes t)
(use-package doom-themes
  :config
  ;Flash mode-line on error
  (doom-themes-visual-bell-config)

  ;Corrects org-modeâ€™s native fontification
  (doom-themes-org-config)

  ;An interactive funtion to switch themes.
  (defun cpkx/switch-theme ()
  (interactive)
  (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
  (call-interactively #'load-theme))

  ;Set Theme
  (load-theme 'doom-dracula t))
#+end_src
** Modeline
*** Doom Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :hook (after-init . doom-modeline-mode)
  :custom
  ;; Don't compact font caches during GC. Windows Laggy Issue
  (inhibit-compacting-font-caches t)
  (doom-modeline-height 15)
  (doom-modeline-slp t)
  (doom-modeline-minor-modes t)
  (doom-modeline-persp-name nil)
  (doom-modeline-icon t)
  (doom-modeline-major-mode-color-icon t))
#+end_src
*** Current Time
#+begin_src emacs-lisp
(setq display-time-24hr-format t)
(setq display-time-default-load-average nil)
(setq display-time-day-and-date t)
(display-time-mode)
#+end_src
*** Yes/No -> y/n
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
* Productivity
** Format All
#+begin_src emacs-lisp
  (use-package format-all
    :bind ("C-c C-f" . format-all-buffer))
#+end_src
** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
** Paren
*** Smart Paren
#+begin_src emacs-lisp
  (use-package smartparens
    :config
    (smartparens-global-mode t))
#+end_src
*** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
*** Highlight paren
#+begin_src emacs-lisp
(show-paren-mode 1)
#+end_src
* Completion
** Ivy
*** Basic Setup
#+begin_src emacs-lisp
  (use-package ivy
    :diminish ivy-mode)
#+end_src
*** Counsel
#+begin_src emacs-lisp

#+end_src
** Company
*** Company-Mode
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :init
    (progn
      (add-hook 'after-init-hook 'global-company-mode))
    :config
    (setq company-idle-delay 0.0
          company-echo-delay 0
          company-tooltip-idle-delay 0
          company-tooltip-align-annotations t
          company-minimum-prefix-length 1
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil
          company-dabbrev-code-other-buffers 'code
          company-dabbrev-code-time-limit 5
          company-backends '(company-keywords
                             company-dabbrev-code)
          company-transformers '(company-sort-by-backend-importance)))
#+end_src
*** Company-Box
#+begin_src emacs-lisp
(use-package company-box
  :diminish company-box-mode
  :hook (company-mode . company-box-mode))
#+end_src
*** Company-Prescient
#+begin_src emacs-lisp
  (use-package company-prescient
    :after company
    :config
    (company-prescient-mode))
#+end_src
*** Company-Posframe
#+begin_src emacs-lisp
  (use-package company-posframe
    :diminish company-posframe-mode
    :after company
    :config
    (setq company-posframe-show-indicator   nil
          company-posframe-show-metadata    nil
          company-posframe-quickhelp-delay  nil)
    (company-posframe-mode 1))
#+end_src
* Org
** Org Load Path
*** Fix Org-Git-Version
#+begin_src emacs-lisp
(defun cpkx/fix-org-git-version ()
  "The Git version of org-mode.
  Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))
#+end_src
*** Fix Org-Release
#+begin_src emacs-lisp
(defun cpkx/fix-org-release ()
  "The release version of org-mode.
  Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))
#+end_src
*** Installation
#+begin_src emacs-lisp
(use-package org
  :config
  ;; these depend on the 'straight.el fixes' above
  (defalias #'org-git-version #'cpkx/fix-org-git-version)
  (defalias #'org-release #'cpkx/fix-org-release)
  (require 'org-habit)
  (require 'org-capture)
  (require 'org-tempo))
#+end_src
** Org Config
#+begin_src emacs-lisp
  (defun cpkx/org-mode-setup()
    (org-indent-mode)
    (variable-pitch-mode 0))
  (use-package org
    :hook (org-mode . cpkx/org-mode-setup))
#+end_src
