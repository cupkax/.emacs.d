#+TITLE:  Emacs Configuration
#+AUTHOR: Vedant Sansare
#+PROPERTY: header-args emacs-lisp :tangle init.el :results silent :comments link

* Early =init.el=
#+begin_src emacs-lisp :tangle early-init.el
;;; -*- lexical-binding: t; -*-
(setq gc-cons-threshold most-positive-fixnum)
(defvar default-file-name-handler-alist file-name-handler-alist)
(setq file-name-handler-alist nil)

(add-hook 'emacs-startup-hook
          (lambda ()
            (setq file-name-handler-alist default-file-name-handler-alist)) 100)
(setq package-enable-at-startup nil)
(setq frame-inhibit-implied-resize t)
#+end_src
* Initial
** Lexical Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
** Garbage Collection
 #+begin_src emacs-lisp
 (defconst 1mb 1048576)
 (defconst 20mb 20971520)
 (defconst 30mb 31457280)
 (defconst 50mb 52428800)

 (defun cpkx/defer-garbage-collection ()
   (setq gc-cons-threshold most-positive-fixnum))

 (defun cpkx/restore-garbage-collection ()
   (run-at-time 1 nil (lambda () (setq gc-cons-threshold 30mb))))

 (add-hook 'emacs-startup-hook 'cpkx/restore-garbage-collection 100)
 (add-hook 'minibuffer-setup-hook 'cpkx/defer-garbage-collection)
 (add-hook 'minibuffer-exit-hook 'cpkx/restore-garbage-collection)

 (setq read-process-output-max 1mb)
 #+end_src
** Set Default Language
#+begin_src emacs-lisp
(setenv "LANG" "en_GB")
#+end_src
** Uniform Starting Directory
#+begin_src emacs-lisp
(setq default-directory "~/" )
#+end_src
* Package Management
** Bootstrap =straight.el=
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default t)
#+end_src
** Use Package
#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
(straight-use-package 'use-package)
(use-package git) ;; ensure we can install from git sources
#+end_src
