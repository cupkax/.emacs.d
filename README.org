#+TITLE: Emacs Config
#+PROPERTY: header-args emacs-lisp :tangle "~/.emacs.d/init.el"

* Table of Contents                                                     :TOC_3:
- [[#early-init][=early init=]]
- [[#initial][Initial]]
  - [[#lexical-binding][Lexical Binding]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#start-time][Start Time]]
  - [[#define-constants][Define Constants]]
  - [[#clean-emacsd][Clean .emacs.d]]
    - [[#autosave][Autosave]]
    - [[#backups][Backups]]
    - [[#history][History]]
    - [[#recent-files][Recent Files]]
    - [[#custom-file][Custom File]]
  - [[#utf-8-unix-system][=utf-8-unix= System]]
  - [[#set-default-language][Set Default Language]]
  - [[#c-z-undo][C-z undo]]
  - [[#uniform-starting-directory][Uniform Starting Directory]]
- [[#package-management][Package Management]]
  - [[#configure-package-manager][Configure Package Manager]]
  - [[#bootstrap-straightel][Bootstrap =Straight.el=]]
  - [[#use-package][Use Package]]
  - [[#libraries][Libraries]]
- [[#personal-information][Personal Information]]
- [[#uiux--other-visuals][UI/UX & Other Visuals]]
  - [[#aesthetic-changes][Aesthetic changes]]
    - [[#defaults][Defaults]]
    - [[#cursor][Cursor]]
  - [[#fonts-and-icons][Fonts and Icons]]
    - [[#fonts][Fonts]]
    - [[#all-the-icons][All the icons]]
  - [[#prettify-symbols][Prettify Symbols]]
  - [[#dashboard][Dashboard]]
  - [[#themes][Themes]]
  - [[#modeline][Modeline]]
    - [[#doom-modeline][Doom Modeline]]
    - [[#current-time][Current Time]]
    - [[#yesno---yn][Yes/No -> y/n]]
    - [[#diminish-buffer-face-mode][Diminish Buffer Face Mode]]
- [[#bindings][Bindings]]
  - [[#which-key][Which Key]]
  - [[#esc-cancel][ESC Cancel]]
  - [[#evil][Evil]]
  - [[#general][General]]
- [[#buffer-and-window-management][Buffer and Window Management]]
  - [[#window-management][Window Management]]
    - [[#window-history][Window History]]
  - [[#buffer-management][Buffer Management]]
    - [[#bufler][Bufler]]
- [[#navigation][Navigation]]
  - [[#helm][Helm]]
  - [[#ivy][Ivy]]
    - [[#basic-setup][Basic Setup]]
    - [[#ivy-bibtex][Ivy-Bibtex]]
    - [[#ivy-prescient][Ivy-Prescient]]
    - [[#ivy-hydra][Ivy-Hydra]]
    - [[#ivy-rich][Ivy-Rich]]
    - [[#ivy-posframe][Ivy-Posframe]]
    - [[#counsel][Counsel]]
    - [[#flx][Flx]]
- [[#development][Development]]
  - [[#company][Company]]
  - [[#languages][Languages]]
    - [[#language-server-protocol][Language Server Protocol]]
  - [[#productivity][Productivity]]
    - [[#helpful][Helpful]]
    - [[#format-all][Format All]]
    - [[#indentation][Indentation]]
    - [[#numericals][Numericals]]
    - [[#color-identifiers][Color Identifiers]]
    - [[#parens][Parens]]
- [[#org][Org]]
  - [[#org-load-path][Org Load Path]]
    - [[#fix-org-git-version][Fix Org-Git-Version]]
    - [[#fix-org-release][Fix Org-Release]]
    - [[#installation][Installation]]
  - [[#org-config][Org Config]]
    - [[#basic-setup-1][Basic Setup]]
    - [[#org-source-code-blocks][Org Source Code Blocks]]
    - [[#tangle-save][Tangle Save]]
  - [[#org-ref][Org-Ref]]
  - [[#org-noter][Org-Noter]]
  - [[#pdf][PDF]]
    - [[#org-pdftools][Org-PDFTools]]
    - [[#org-noter-pdftools][Org-Noter-PDFTools]]
  - [[#toc][TOC]]
- [[#writing][Writing]]
  - [[#olivetti][Olivetti]]
  - [[#line-spacing][Line Spacing]]
  - [[#export][Export]]
    - [[#pandoc][Pandoc]]
  - [[#default-text-scaling][Default Text Scaling]]
- [[#pdf-1][PDF]]
  - [[#pdf-tools][PDF Tools]]
- [[#start-server][Start Server]]
- [[#end][End]]
  - [[#message-startup-time][Message Startup Time]]
  - [[#garbage-collection-threshold][Garbage Collection Threshold]]

* =early init=
#+begin_src emacs-lisp :tangle "~/.emacs.d/early-init.el"
  ;;; -*- lexical-binding: t; -*-
  (defvar cpkx--file-name-handler-alist file-name-handler-alist)
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6
        file-name-handler-alist nil)

  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'set-scroll-bar-mode)
      (set-scroll-bar-mode nil))
  (if (fboundp 'menu-bar-mode)
      (menu-bar-mode -1))

  (setq package-enable-at-startup nil)
#+end_src

* Initial
** Lexical Binding
#+begin_src emacs-lisp
;;; -*- lexical-binding: t; -*-
#+end_src
** Garbage Collection
#+begin_src emacs-lisp
  (defun cpkx/defer-garbage-collection ()
    (setq gc-cons-threshold most-positive-fixnum))

  (defun cpkx/restore-garbage-collection ()
    (setq gc-cons-threshold 800000))

  (add-hook 'minibuffer-setup-hook #'cpkx/defer-garbage-collection)
  (add-hook 'minibuffer-exit-hook #'cpkx/restore-garbage-collection)
#+end_src

** Start Time
#+begin_src emacs-lisp
  (setq emacs-load-start-time (current-time))
#+end_src

** Define Constants
#+begin_src emacs-lisp
(defconst *sys/win32*
  (eq system-type 'windows-nt)
  "Are we running on a WinTel system?")

(defconst *sys/linux*
  (eq system-type 'gnu/linux)
  "Are we running on a GNU/Linux system?")

(defconst python-p
  (or (executable-find "python3")
      (and (executable-find "python")
           (> (length (shell-command-to-string "python --version | grep 'Python 3'")) 0)))
  "Do we have python3?")

(defconst pip-p
  (or (executable-find "pip3")
      (and (executable-find "pip")
           (> (length (shell-command-to-string "pip --version | grep 'python 3'")) 0)))
  "Do we have pip3?")

(defconst eaf-env-p
  (and *sys/linux* (display-graphic-p) python-p pip-p
       (not (equal (shell-command-to-string "pip freeze | grep '^PyQt\\|PyQtWebEngine'") "")))
  "Do we have EAF environment setup?")
#+end_src
** Clean .emacs.d
*** Autosave
#+begin_src emacs-lisp
  (setq auto-save-visited-mode t)
  (setq auto-save-default t)
  (setq auto-save-timeout 20)
  (setq auto-save-interval 20)
  (setq auto-save-file-name-transforms
        '((".*" "~/.emacs.d/auto-save-list/" t)))
#+end_src

*** Backups
#+begin_src emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
  (setq kept-new-versions 10)
  (setq kept-old-versions 0)
  (setq delete-old-versions t)
  (setq backup-by-copying t)
  (setq version-control t)
  (setq vc-make-backup-files t)
  (setq delete-by-moving-to-trash t)
#+end_src
*** History
#+begin_src emacs-lisp
(setq savehist-file "~/.emacs.d/savehist")
(savehist-mode 1)
(setq history-length t)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+end_src
*** Recent Files
#+begin_src emacs-lisp
(require 'recentf)
(setq recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode)
#+end_src

*** Custom File
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom-settings.el")
(load custom-file t)
#+end_src
** =utf-8-unix= System
#+begin_src emacs-lisp
  (prefer-coding-system 'utf-8-unix)
  (set-default-coding-systems 'utf-8)
#+end_src

** Set Default Language
#+begin_src emacs-lisp
(setenv "LANG" "en_GB")
#+end_src
** C-z undo
#+begin_src emacs-lisp
  (global-set-key (kbd "C-z") 'undo) ;Emacs default is bound to hide Emacs.
  (global-set-key (kbd "C-SPC") nil)
#+end_src

** Uniform Starting Directory
#+begin_src emacs-lisp
(setq default-directory "~/" )
#+end_src

* Package Management
** Configure Package Manager
#+begin_src emacs-lisp
 ; (unless (bound-and-true-p package--initialized)
 ;   (setq package-enable-at-startup nil)          ; To prevent initializing twice
 ;   (package-initialize))

;  ;; set use-package-verbose to t for interpreted .emacs,
;  ;; and to nil for byte-compiled .emacs.elc.
;  (eval-and-compile
;    (setq use-package-verbose (not (bound-and-true-p byte-compile-current-file))))
#+end_src

** Bootstrap =Straight.el=
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default t)
#+end_src

** Use Package
#+begin_src emacs-lisp
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
  (use-package git) ;; ensure we can install from git sources
#+end_src

** Libraries
#+begin_src emacs-lisp
(use-package dash :ensure t)
(use-package diminish :ensure t)
#+end_src

* Personal Information
#+begin_src emacs-lisp
(setq user-full-name "Vedant Sansare")
(setq user-mail-address "vedantsansare23@gmail.com")
#+end_src

* UI/UX & Other Visuals
** Aesthetic changes
*** Defaults
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
  (setq inhibit-startup-echo-area-message t)
  (setq inhibit-startup-message t)
  (setq initial-scratch-message nil)
  (setq-default indent-tabs-mode nil)

  (setq column-number-mode t)
  (setq size-indication-mode t)
  (setq blink-cursor-mode 0)

  (setq pop-up-windows nil)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  ;; Underline line at descent position, not baseline position
  (setq x-underline-at-descent-line t)
#+end_src

*** Cursor
#+begin_src emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config
    (setq beacon-blink-when-window-scrolls nil
          beacon-dont-blink-major-modes '(t pdf-view-mode)
          beacon-size 10)
    (beacon-mode 1))
#+end_src

** Fonts and Icons
*** Fonts
**** Font Face
#+begin_src emacs-lisp
;; Set the font face based on platform
(set-face-attribute 'default nil :font "FiraCode Nerd Font"  :height 110)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "FiraCode Nerd Font" :height 110)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "JetBrainsMono Nerd Font" :height 120)
#+end_src

**** Unicode Support
#+begin_src emacs-lisp
  (defun cpkx/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                       (lambda (i) (string-equal (car i) block-name))
                       unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :ensure t
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
     (lambda (block-name)
       (cpkx/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
     '("Dingbats"
       "Emoticons"
       "Miscellaneous Symbols and Pictographs"
       "Transport and Map Symbols"))
    (unicode-fonts-setup))
#+end_src

*** All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))
#+end_src

** Prettify Symbols
Make some word or string show as pretty Unicode symbols.
#+begin_src emacs-lisp
  (global-prettify-symbols-mode 1)
  (defun add-pretty-lambda ()
    (setq prettify-symbols-alist
          '(
            ("lambda" . 955)
            ("delta" . 120517)
            ("epsilon" . 120518)
            ("->" . 8594)
            ("<=" . 8804)
            (">=" . 8805)
            )))
  (add-hook 'prog-mode-hook 'add-pretty-lambda)
  (add-hook 'org-mode-hook 'add-pretty-lambda)
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-banner-logo-title "Welcome Vedant")
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts nil))
#+end_src

** Themes
#+begin_src emacs-lisp
  (setq custom-safe-themes t)
  (use-package doom-themes
    :config
    ;Flash mode-line on error
    (doom-themes-visual-bell-config)

    ;Corrects org-mode’s native fontification
    (doom-themes-org-config)

    ;An interactive funtion to switch themes.
    (defun cpkx/switch-theme ()
    (interactive)
    (disable-theme (intern (car (mapcar #'symbol-name custom-enabled-themes))))
    (call-interactively #'load-theme))

    ;Set Theme
    (load-theme 'doom-dracula t))
#+end_src
** Modeline
*** Doom Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode)
    :custom
    ;; Don't compact font caches during GC. Windows Laggy Issue
    (inhibit-compacting-font-caches t)
    (doom-modeline-height 15)
    (doom-modeline-lsp t)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-icon t)
    (doom-modeline-major-mode-color-icon t))
#+end_src

*** Current Time
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-default-load-average nil)
  (setq display-time-day-and-date t)
  (setq display-time-mode t)
#+end_src

*** Yes/No -> y/n
#+begin_src emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src
*** TODO Diminish Buffer Face Mode
Temporary solution to remove buffer face mode from modeline
#+begin_src emacs-lisp
  (eval-after-load "face-remap"
    '(diminish 'buffer-face-mode))
#+end_src

* Bindings
** Which Key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :custom
    (which-key-separator " ")
    (which-key-prefix-prefix "+")
    :config
    (setq which-key-idle-delay 0))
#+end_src

** ESC Cancel
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

** Evil
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (evil-collection-init))
#+end_src

** General
#+begin_src emacs-lisp
  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer cpkx/leader-key-def
      :keymaps '(normal insert visual emacs)
      :prefix "C-SPC")
      ;:global-prefix "C-SPC")

    (general-create-definer cpkx/ctrl-c-keys
      :prefix "C-c"))
#+end_src

* Buffer and Window Management
** Window Management
*** Window History
#+begin_src emacs-lisp
(winner-mode)
#+end_src
** Buffer Management
*** Bufler
#+begin_src emacs-lisp
(use-package bufler)
#+end_src

* Navigation
** Helm
#+begin_src emacs-lisp :tangle no
  (use-package helm-bibtex
    :config
    (setq bibtex-completion-bibliography      "~/Dropbox/org/Research/zotLib.bib")
    (setq bibtex-completion-library-path      "~/Dropbox/org/Research/zotero-library/")
    (setq bibtex-completion-notes-path        "~/git/phd/notes/notes.org")
    (setq bibtex-completion-pdf-field         "file")
    (setq bibtex-completion-notes-template-one-file
          (concat
           "#+TITLE: ${title}\n"
           "#+CITE_KEY: ${=key=}\n"
           ":PROPERTIES:\n"
           ":Custom_ID: ${=key=}\n"
           ":NOTER_DOCUMENT: ${file}\n"
           ":AUTHOR: ${author-abbrev}\n"
           ":JOURNAL: ${journaltitle}\n"
           ":DATE: ${date}\n"
           ":YEAR: ${year}\n"
           ":DOI: ${doi}\n"
           ":URL: ${url}\n"
           ":END:\n\n")))
#+end_src
** Ivy
*** Basic Setup
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :init
    (use-package counsel)
    (use-package swiper)
    (ivy-mode 1)
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           :map ivy-switch-buffer-map
           ("TAB" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-wrap t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)

    ;; Use different regex strategies per completion command
    (push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)

    ;; Set minibuffer height for different commands
    (setf (alist-get 'swiper ivy-height-alist) 15))
#+end_src

*** Ivy-Bibtex
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :config
    (setq bibtex-completion-bibliography        "~/Dropbox/org/Research/zotLib.bib")
    (setq bibtex-completion-library-path        "~/Dropbox/org/Research/zotero-library/")
    (setq bibtex-completion-notes-path          "~/git/phd/notes/")
    (setq ivy-bibtex-default-action             'ivy-bibtex-edit-notes)
    (setq bibtex-completion-pdf-field           "file")
    (setq bibtex-completion-find-additional-pdfs t)
    (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
    (setq	bibtex-completion-pdf-symbol "ρ")
    (setq	bibtex-completion-notes-symbol "η")
    (setq bibtex-completion-notes-template-multiple-files
          (concat
           "#+TITLE: ${title}\n"
           "#+CITE_KEY: ${=key=}\n"
           ":PROPERTIES:\n"
           ":Custom_ID: ${=key=}\n"
           ":AUTHOR: ${author-abbrev}\n"
           ":JOURNAL: ${journaltitle}\n"
           ":DATE: ${date}\n"
           ":YEAR: ${year}\n"
           ":DOI: ${doi}\n"
           ":URL: ${url}\n"
           ":END:\n\n")))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24555 39209 448663 0) :init (24555 39209 448659 0) :config (24555 39209 448653 0) :config-secs (0 0 4 0) :init-secs (0 0 12 0) :use-package-secs (0 0 57 0)))

*** Ivy-Prescient
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src
*** Ivy-Hydra
#+begin_src emacs-lisp
  (use-package ivy-hydra
    :after hydra)
#+end_src
*** Ivy-Rich
#+begin_src emacs-lisp
    (use-package ivy-rich
      :init
      (ivy-rich-mode 1)
      :config
      (setq ivy-format-function #'ivy-format-function-line)
      )
#+end_src
*** Ivy-Posframe
#+begin_src emacs-lisp
  (use-package ivy-posframe
    :after ivy
    :config
    (setq ivy-posframe-hide-minibuffer t
          ivy-posframe-border-width 2
          ivy-posframe-min-width 80
          ivy-posframe-min-height 10
          ivy-posframe-width nil
          ivy-posframe-height nil)
    (setq ivy-posframe-display-functions-alist
          '((swiper . ivy-posframe-display-at-window-bottom-left)
            (t . ivy-posframe-display-at-frame-center)
            ))
    (ivy-posframe-mode 1))
#+end_src
*** Counsel
#+begin_src emacs-lisp
  (use-package counsel
    :diminish counsel-mode
    :ensure t
    :bind
    (("M-x"     . counsel-M-x)
     ("C-M-j"   . 'counsel-switch-buffer)
     ("C-x C-f" . counsel-find-file)
     ("C-M-l"   . counsel-imenu)
     :map minibuffer-local-map
     ("C-r"     . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil) ;; Don't start searches with ^
    (setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7)
    (push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)
    (counsel-mode 1))
#+end_src
*** Flx
#+begin_src emacs-lisp
  (use-package flx  ;; Improves sorting for fuzzy-matched results
    :init
    (setq ivy-flx-limit 10000))
#+end_src

* Development
** Company
#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :diminish company-box-mode
    :hook (company-mode . company-box-mode))
#+end_src

** Languages
*** Language Server Protocol
#+begin_src emacs-lisp
  (use-package ivy-xref
    :init (if (< emacs-major-version 27)
              (setq xref-show-xrefs-function #'ivy-xref-show-xrefs)
            (setq xref-show-definitions-function #'ivy-xref-show-defs)))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :bind (:map lsp-mode-map
                ("TAB" . completion-at-point))
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    :custom
    (lsp-auto-guess-root nil)
    (lsp-prefer-flymake nil) ; Use flycheck instead of flymake
    (lsp-file-watch-threshold 2000)
    (read-process-output-max (* 1024 1024))
    (lsp-eldoc-hook nil))

  (cpkx/leader-key-def
    "l"  '(:ignore t :which-key "lsp")
    "d" 'xref-find-definitions
    "r" 'xref-find-references
    "n" 'lsp-ui-find-next-reference
    "p" 'lsp-ui-find-prev-reference
    "s" 'counsel-imenu
    "e" 'lsp-ui-flycheck-list
    "S" 'lsp-ui-sideline-mode
    "X" 'lsp-execute-code-action)

  (use-package lsp-ui
    :after lsp-mode
    :diminish
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-header t)
    (lsp-ui-doc-include-signature t)
    (lsp-ui-doc-border (face-foreground 'default))
    (lsp-ui-sideline-enable nil)
    (lsp-ui-sideline-ignore-duplicate t)
    (lsp-ui-sideline-show-code-actions nil)
    :config
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom)
    (lsp-ui-doc-show))
#+end_src

** Productivity
*** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

*** Format All
#+begin_src emacs-lisp
(use-package format-all
  :bind ("C-c C-f" . format-all-buffer))
#+end_src

*** Indentation
*** Numericals
**** Highlight Num
#+begin_src emacs-lisp
  (use-package highlight-numbers
    :hook (prog-mode . highlight-numbers-mode))
#+end_src

*** Color Identifiers
#+begin_src emacs-lisp
  (use-package color-identifiers-mode
    :diminish color-identifiers-mode
    :hook (prog-mode . color-identifiers-mode))
#+end_src

*** Parens
**** Smart Parens
#+begin_src emacs-lisp
  (use-package smartparens
    :hook (prog-mode . smartparens-mode)
    :diminish smartparens-mode
    :config
;    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (sp-local-pair 'org-mode "[" nil :actions nil))
#+end_src

**** Highlight Paren
#+begin_src emacs-lisp
  ;(use-package highlight-parentheses
  ;  :diminish highlight-parentheses-mode
  ;  :hook (prog-mode . highlight-parentheses-mode)
  ;  :config
  ;  (setq hl-paren-delay 0.2)
  ;  (setq hl-paren-colors '("Springgreen3"
   ;                         "IndianRed1"
   ;                         "IndianRed3"
   ;                         "IndianRed4"))
   ; (set-face-attribute 'hl-paren-face nil :weight 'ultra-bold))
#+end_src
**** Rainbow
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* Org
** Org Load Path
*** Fix Org-Git-Version
#+begin_src emacs-lisp
(defun cpkx/fix-org-git-version ()
  "The Git version of org-mode.
  Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (git-run "describe"
              "--match=release\*"
              "--abbrev=6"
              "HEAD"))))
#+end_src
*** Fix Org-Release
#+begin_src emacs-lisp
(defun cpkx/fix-org-release ()
  "The release version of org-mode.
  Inserted by installing org-mode or when a release is made."
  (require 'git)
  (let ((git-repo (expand-file-name
                   "straight/repos/org/" user-emacs-directory)))
    (string-trim
     (string-remove-prefix
      "release_"
      (git-run "describe"
               "--match=release\*"
               "--abbrev=0"
               "HEAD")))))
#+end_src
*** Installation
#+begin_src emacs-lisp
(use-package org
  :config
  ;; these depend on the 'straight.el fixes' above
  (defalias #'org-git-version #'cpkx/fix-org-git-version)
  (defalias #'org-release #'cpkx/fix-org-release)
  (require 'org-habit)
  (require 'org-capture)
  (require 'org-tempo))
#+end_src

** Org Config
*** Basic Setup
#+begin_src emacs-lisp
  (defun cpkx/org-mode-setup ()
    (org-indent-mode)
    (diminish 'org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0))

  (use-package org
    :diminish t
    :hook (org-mode . cpkx/org-mode-setup)
    :config
    (setq org-directory "~/Dropbox/org"))
#+end_src

*** Org Source Code Blocks
**** Org Structure Template
#+begin_src emacs-lisp
  (use-package org
    :diminish
    :config
    (setq org-structure-template-alist
	'(("e" . "src emacs-lisp"))))
#+end_src

*** Tangle Save
Saves
#+begin_src emacs-lisp
  (defun cpkx/org-babel-tangle-save ()
    (let ((org-confirm-babel-evaluate nil))
      (org-babel-tangle)))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'cpkx/org-babel-tangle-save
                                           'run-at-end 'only-in-org-mode)))
#+end_src

** Org-Ref
#+begin_src emacs-lisp
  ;(use-package org-ref
  ;  :after bibtex
  ;  :demand
  ;  :config
  ;  (setq org-ref-pdf-directory               "~/Dropbox/org/Research/zotero-library/")
  ;  (setq org-ref-default-bibliography      '("~/Dropbox/org/Research/zotLib.bib"))
  ;  (setq org-ref-bibliography-notes          "~/git/phd/notes/notes.org")
  ;  (setq reftex-default-bibliography         org-ref-default-bibliography)
  ;  (setq org-ref-note-title-format
  ;        "* TODO %y - %t\n
  ;:PROPERTIES:\n
  ; :Custom_ID: %k\n
  ; :NOTER_DOCUMENT: %F\n
  ; :AUTHOR: %9a\n
  ; :JOURNAL: %j\n
  ; :YEAR: %y\n
  ; :VOLUME: %v\n
  ; :PAGES: %p\n
  ; :DOI: %D\n
  ; :URL: %U\n
  ;:END:\n\n")
  ;  (helm-bibtex-ed)
  ;  (setq org-ref-notes-function            'orb-edit-notes)
  ;  (setq org-ref-completion-library        'org-ref-ivy-cite)
  ;  (setq org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex))
    #+end_src

** Org-Noter
#+begin_src emacs-lisp
  (use-package org-noter
    :config
    (setq org-noter-default-notes-file-names  '("notes.org"))
    (setq org-noter-notes-search-path         '("~/git/phd/notes"))
    (setq org-noter-auto-save-last-location   t)
    (setq org-noter-always-create-frame       nil)
    (setq org-noter-insert-note-no-questions  t)
    (setq org-noter-notes-window-location     'horizontal-split))
#+end_src

#+RESULTS:
: #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8125 data (:use-package (24555 38012 284150 0) :init (24555 38012 284147 0) :config (24555 38012 284142 0) :config-secs (0 0 4 0) :init-secs (0 0 11 0) :use-package-secs (0 0 58 0)))

** PDF
*** Org-PDFTools
#+begin_src emacs-lisp
;(use-package org-pdftools
;  :hook (org-mode . org-pdftools-setup-link))
#+end_src

*** Org-Noter-PDFTools
#+begin_src emacs-lisp
;(use-package org-noter-pdftools
;  :after org-noter
;  :config
;  (with-eval-after-load 'pdf-annot
;    (add-hook 'pdf-annot-activate-handler-functions ;#'org-noter-pdftools-jump-to-note)))
#+end_src

** TOC
#+begin_src emacs-lisp
(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+end_src

* Writing
** Olivetti
#+begin_src emacs-lisp
  (use-package olivetti
    :hook ((text-mode) . olivetti-mode)
    :diminish
    (olivetti-mode)
    :config
    (setq olivetti-body-width 0.7)
    (setq olivetti-minimum-body-width 80)
    (setq olivetti-recall-visual-line-mode-entry-state t))
  (diminish 'visual-line-mode)
#+end_src

** Line Spacing
#+begin_src emacs-lisp
;;; Line spacing, can be 0 for code and 1 or 2 for text
(setq-default line-spacing 2)
#+end_src

** Export
*** Pandoc
#+begin_src emacs-lisp
  (use-package pandoc-mode
    :hook ((text-mode) . pandoc-mode)
    :diminish pandoc-mode)
#+end_src
** Default Text Scaling
#+begin_src emacs-lisp
(use-package default-text-scale
  :config
  (default-text-scale-mode))
#+end_src
* PDF
** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :diminish pdf-view-midnight-minor-mode
    :mode (("\\.pdf\\'" . pdf-view-mode))
    :config
    (progn
      (require 'pdf-occur)
      (require 'pdf-sync)
      (pdf-tools-install :no-query)
      (add-hook 'pdf-view-mode-hook (lambda() (pdf-view-midnight-minor-mode 1)))
      (add-hook 'pdf-view-mode-hook (lambda () (cua-mode 0)))
      (add-hook 'pdf-view-mode-hook #'pdf-tools-enable-minor-modes)))
#+end_src
* Start Server
#+begin_src emacs-lisp
(server-start)
#+end_src
* End
** Message Startup Time
#+begin_src emacs-lisp
  (setq inhibit-startup-echo-area-message "cpkx")
  (setq inhibit-startup-screen t)
  (when (require 'time-date nil t)
    (message "Emacs startup time: %.2f seconds."
             (time-to-seconds (time-since emacs-load-start-time))))
#+end_src
** Garbage Collection Threshold
#+begin_src emacs-lisp
  (setq gc-cons-threshold 800000
        gc-cons-percentage 0.1
        file-name-handler-alist cpkx--file-name-handler-alist)
#+end_src
